/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef api_TYPES_H
#define api_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "variant_types.h"


namespace api {

typedef int8_t Currency;

typedef std::string Address;

typedef int64_t Time;

typedef std::map<Currency, class Amount>  Balance;

typedef std::map<Currency, class CumulativeAmount>  Total;

typedef std::string PoolHash;

typedef int64_t PoolNumber;

typedef int32_t Count;

typedef std::vector<class PeriodStats>  StatsPerPeriod;

class Amount;

class CumulativeAmount;

class SmartContract;

class SmartContractInvocation;

class TransactionId;

class Transaction;

class SealedTransaction;

class Pool;

class PeriodStats;

class APIResponse;

class BalanceGetResult;

class TransactionGetResult;

class TransactionsGetResult;

class TransactionFlowResult;

class PoolListGetResult;

class PoolInfoGetResult;

class PoolTransactionsGetResult;

class StatsGetResult;

class SmartContractGetResult;

class SmartContractAddressesListGetResult;

class SmartContractsListGetResult;

class SmartMethodParamsGetResult;


class Amount : public virtual ::apache::thrift::TBase {
 public:

  Amount(const Amount&);
  Amount& operator=(const Amount&);
  Amount() : integral(0), fraction(0LL) {
  }

  virtual ~Amount() throw();
  int32_t integral;
  int64_t fraction;

  void __set_integral(const int32_t val);

  void __set_fraction(const int64_t val);

  bool operator == (const Amount & rhs) const
  {
    if (!(integral == rhs.integral))
      return false;
    if (!(fraction == rhs.fraction))
      return false;
    return true;
  }
  bool operator != (const Amount &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Amount & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Amount &a, Amount &b);

std::ostream& operator<<(std::ostream& out, const Amount& obj);


class CumulativeAmount : public virtual ::apache::thrift::TBase {
 public:

  CumulativeAmount(const CumulativeAmount&);
  CumulativeAmount& operator=(const CumulativeAmount&);
  CumulativeAmount() : integral(0LL), fraction(0LL) {
  }

  virtual ~CumulativeAmount() throw();
  int64_t integral;
  int64_t fraction;

  void __set_integral(const int64_t val);

  void __set_fraction(const int64_t val);

  bool operator == (const CumulativeAmount & rhs) const
  {
    if (!(integral == rhs.integral))
      return false;
    if (!(fraction == rhs.fraction))
      return false;
    return true;
  }
  bool operator != (const CumulativeAmount &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CumulativeAmount & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CumulativeAmount &a, CumulativeAmount &b);

std::ostream& operator<<(std::ostream& out, const CumulativeAmount& obj);

typedef struct _SmartContract__isset {
  _SmartContract__isset() : deployer(false), sourceCode(false), byteCode(false), hashState(false) {}
  bool deployer :1;
  bool sourceCode :1;
  bool byteCode :1;
  bool hashState :1;
} _SmartContract__isset;

class SmartContract : public virtual ::apache::thrift::TBase {
 public:

  SmartContract(const SmartContract&);
  SmartContract& operator=(const SmartContract&);
  SmartContract() : address(), deployer(), sourceCode(), byteCode(), hashState() {
  }

  virtual ~SmartContract() throw();
  Address address;
  Address deployer;
  std::string sourceCode;
  std::string byteCode;
  std::string hashState;

  _SmartContract__isset __isset;

  void __set_address(const Address& val);

  void __set_deployer(const Address& val);

  void __set_sourceCode(const std::string& val);

  void __set_byteCode(const std::string& val);

  void __set_hashState(const std::string& val);

  bool operator == (const SmartContract & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(deployer == rhs.deployer))
      return false;
    if (!(sourceCode == rhs.sourceCode))
      return false;
    if (!(byteCode == rhs.byteCode))
      return false;
    if (!(hashState == rhs.hashState))
      return false;
    return true;
  }
  bool operator != (const SmartContract &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SmartContract & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SmartContract &a, SmartContract &b);

std::ostream& operator<<(std::ostream& out, const SmartContract& obj);

typedef struct _SmartContractInvocation__isset {
  _SmartContractInvocation__isset() : sourceCode(false), byteCode(false), hashState(false), method(false), params(false), forgetNewState(false) {}
  bool sourceCode :1;
  bool byteCode :1;
  bool hashState :1;
  bool method :1;
  bool params :1;
  bool forgetNewState :1;
} _SmartContractInvocation__isset;

class SmartContractInvocation : public virtual ::apache::thrift::TBase {
 public:

  SmartContractInvocation(const SmartContractInvocation&);
  SmartContractInvocation& operator=(const SmartContractInvocation&);
  SmartContractInvocation() : sourceCode(), byteCode(), hashState(), method(), forgetNewState(0) {
  }

  virtual ~SmartContractInvocation() throw();
  std::string sourceCode;
  std::string byteCode;
  std::string hashState;
  std::string method;
  std::vector<std::string>  params;
  bool forgetNewState;

  _SmartContractInvocation__isset __isset;

  void __set_sourceCode(const std::string& val);

  void __set_byteCode(const std::string& val);

  void __set_hashState(const std::string& val);

  void __set_method(const std::string& val);

  void __set_params(const std::vector<std::string> & val);

  void __set_forgetNewState(const bool val);

  bool operator == (const SmartContractInvocation & rhs) const
  {
    if (!(sourceCode == rhs.sourceCode))
      return false;
    if (!(byteCode == rhs.byteCode))
      return false;
    if (!(hashState == rhs.hashState))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(params == rhs.params))
      return false;
    if (!(forgetNewState == rhs.forgetNewState))
      return false;
    return true;
  }
  bool operator != (const SmartContractInvocation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SmartContractInvocation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SmartContractInvocation &a, SmartContractInvocation &b);

std::ostream& operator<<(std::ostream& out, const SmartContractInvocation& obj);

typedef struct _TransactionId__isset {
  _TransactionId__isset() : poolHash(false), index(false) {}
  bool poolHash :1;
  bool index :1;
} _TransactionId__isset;

class TransactionId : public virtual ::apache::thrift::TBase {
 public:

  TransactionId(const TransactionId&);
  TransactionId& operator=(const TransactionId&);
  TransactionId() : poolHash(), index(0) {
  }

  virtual ~TransactionId() throw();
  PoolHash poolHash;
  int32_t index;

  _TransactionId__isset __isset;

  void __set_poolHash(const PoolHash& val);

  void __set_index(const int32_t val);

  bool operator == (const TransactionId & rhs) const
  {
    if (!(poolHash == rhs.poolHash))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const TransactionId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransactionId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TransactionId &a, TransactionId &b);

std::ostream& operator<<(std::ostream& out, const TransactionId& obj);

typedef struct _Transaction__isset {
  _Transaction__isset() : id(false), source(false), target(false), amount(false), balance(false), currency(false), signature(false), smartContract(false), fee(false) {}
  bool id :1;
  bool source :1;
  bool target :1;
  bool amount :1;
  bool balance :1;
  bool currency :1;
  bool signature :1;
  bool smartContract :1;
  bool fee :1;
} _Transaction__isset;

class Transaction : public virtual ::apache::thrift::TBase {
 public:

  Transaction(const Transaction&);
  Transaction& operator=(const Transaction&);
  Transaction() : id(0), source(), target(), currency(0), signature() {
  }

  virtual ~Transaction() throw();
  int64_t id;
  Address source;
  Address target;
  Amount amount;
  Amount balance;
  Currency currency;
  std::string signature;
  SmartContractInvocation smartContract;
  Amount fee;

  _Transaction__isset __isset;

  void __set_id(const int64_t val);

  void __set_source(const Address& val);

  void __set_target(const Address& val);

  void __set_amount(const Amount& val);

  void __set_balance(const Amount& val);

  void __set_currency(const Currency val);

  void __set_signature(const std::string& val);

  void __set_smartContract(const SmartContractInvocation& val);

  void __set_fee(const Amount& val);

  bool operator == (const Transaction & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(source == rhs.source))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(amount == rhs.amount))
      return false;
    if (!(balance == rhs.balance))
      return false;
    if (!(currency == rhs.currency))
      return false;
    if (!(signature == rhs.signature))
      return false;
    if (__isset.smartContract != rhs.__isset.smartContract)
      return false;
    else if (__isset.smartContract && !(smartContract == rhs.smartContract))
      return false;
    if (!(fee == rhs.fee))
      return false;
    return true;
  }
  bool operator != (const Transaction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Transaction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Transaction &a, Transaction &b);

std::ostream& operator<<(std::ostream& out, const Transaction& obj);

typedef struct _SealedTransaction__isset {
  _SealedTransaction__isset() : id(false), trxn(false) {}
  bool id :1;
  bool trxn :1;
} _SealedTransaction__isset;

class SealedTransaction : public virtual ::apache::thrift::TBase {
 public:

  SealedTransaction(const SealedTransaction&);
  SealedTransaction& operator=(const SealedTransaction&);
  SealedTransaction() {
  }

  virtual ~SealedTransaction() throw();
  TransactionId id;
  Transaction trxn;

  _SealedTransaction__isset __isset;

  void __set_id(const TransactionId& val);

  void __set_trxn(const Transaction& val);

  bool operator == (const SealedTransaction & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(trxn == rhs.trxn))
      return false;
    return true;
  }
  bool operator != (const SealedTransaction &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SealedTransaction & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SealedTransaction &a, SealedTransaction &b);

std::ostream& operator<<(std::ostream& out, const SealedTransaction& obj);

typedef struct _Pool__isset {
  _Pool__isset() : hash(false), prevHash(false), time(false), transactionsCount(false), poolNumber(false) {}
  bool hash :1;
  bool prevHash :1;
  bool time :1;
  bool transactionsCount :1;
  bool poolNumber :1;
} _Pool__isset;

class Pool : public virtual ::apache::thrift::TBase {
 public:

  Pool(const Pool&);
  Pool& operator=(const Pool&);
  Pool() : hash(), prevHash(), time(0), transactionsCount(0), poolNumber(0) {
  }

  virtual ~Pool() throw();
  PoolHash hash;
  PoolHash prevHash;
  Time time;
  int32_t transactionsCount;
  PoolNumber poolNumber;

  _Pool__isset __isset;

  void __set_hash(const PoolHash& val);

  void __set_prevHash(const PoolHash& val);

  void __set_time(const Time val);

  void __set_transactionsCount(const int32_t val);

  void __set_poolNumber(const PoolNumber val);

  bool operator == (const Pool & rhs) const
  {
    if (!(hash == rhs.hash))
      return false;
    if (!(prevHash == rhs.prevHash))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(transactionsCount == rhs.transactionsCount))
      return false;
    if (!(poolNumber == rhs.poolNumber))
      return false;
    return true;
  }
  bool operator != (const Pool &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pool & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Pool &a, Pool &b);

std::ostream& operator<<(std::ostream& out, const Pool& obj);

typedef struct _PeriodStats__isset {
  _PeriodStats__isset() : periodDuration(false), poolsCount(false), transactionsCount(false), balancePerCurrency(false), smartContractsCount(false), transactionsSmartCount(false) {}
  bool periodDuration :1;
  bool poolsCount :1;
  bool transactionsCount :1;
  bool balancePerCurrency :1;
  bool smartContractsCount :1;
  bool transactionsSmartCount :1;
} _PeriodStats__isset;

class PeriodStats : public virtual ::apache::thrift::TBase {
 public:

  PeriodStats(const PeriodStats&);
  PeriodStats& operator=(const PeriodStats&);
  PeriodStats() : periodDuration(0), poolsCount(0), transactionsCount(0), smartContractsCount(0), transactionsSmartCount(0) {
  }

  virtual ~PeriodStats() throw();
  Time periodDuration;
  Count poolsCount;
  Count transactionsCount;
  Total balancePerCurrency;
  Count smartContractsCount;
  Count transactionsSmartCount;

  _PeriodStats__isset __isset;

  void __set_periodDuration(const Time val);

  void __set_poolsCount(const Count val);

  void __set_transactionsCount(const Count val);

  void __set_balancePerCurrency(const Total& val);

  void __set_smartContractsCount(const Count val);

  void __set_transactionsSmartCount(const Count val);

  bool operator == (const PeriodStats & rhs) const
  {
    if (!(periodDuration == rhs.periodDuration))
      return false;
    if (!(poolsCount == rhs.poolsCount))
      return false;
    if (!(transactionsCount == rhs.transactionsCount))
      return false;
    if (!(balancePerCurrency == rhs.balancePerCurrency))
      return false;
    if (!(smartContractsCount == rhs.smartContractsCount))
      return false;
    if (!(transactionsSmartCount == rhs.transactionsSmartCount))
      return false;
    return true;
  }
  bool operator != (const PeriodStats &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PeriodStats & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PeriodStats &a, PeriodStats &b);

std::ostream& operator<<(std::ostream& out, const PeriodStats& obj);

typedef struct _APIResponse__isset {
  _APIResponse__isset() : code(false), message(false) {}
  bool code :1;
  bool message :1;
} _APIResponse__isset;

class APIResponse : public virtual ::apache::thrift::TBase {
 public:

  APIResponse(const APIResponse&);
  APIResponse& operator=(const APIResponse&);
  APIResponse() : code(0), message() {
  }

  virtual ~APIResponse() throw();
  int8_t code;
  std::string message;

  _APIResponse__isset __isset;

  void __set_code(const int8_t val);

  void __set_message(const std::string& val);

  bool operator == (const APIResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const APIResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const APIResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(APIResponse &a, APIResponse &b);

std::ostream& operator<<(std::ostream& out, const APIResponse& obj);

typedef struct _BalanceGetResult__isset {
  _BalanceGetResult__isset() : status(false), amount(false) {}
  bool status :1;
  bool amount :1;
} _BalanceGetResult__isset;

class BalanceGetResult : public virtual ::apache::thrift::TBase {
 public:

  BalanceGetResult(const BalanceGetResult&);
  BalanceGetResult& operator=(const BalanceGetResult&);
  BalanceGetResult() {
  }

  virtual ~BalanceGetResult() throw();
  APIResponse status;
  Amount amount;

  _BalanceGetResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_amount(const Amount& val);

  bool operator == (const BalanceGetResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(amount == rhs.amount))
      return false;
    return true;
  }
  bool operator != (const BalanceGetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BalanceGetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BalanceGetResult &a, BalanceGetResult &b);

std::ostream& operator<<(std::ostream& out, const BalanceGetResult& obj);

typedef struct _TransactionGetResult__isset {
  _TransactionGetResult__isset() : status(false), found(false), transaction(false) {}
  bool status :1;
  bool found :1;
  bool transaction :1;
} _TransactionGetResult__isset;

class TransactionGetResult : public virtual ::apache::thrift::TBase {
 public:

  TransactionGetResult(const TransactionGetResult&);
  TransactionGetResult& operator=(const TransactionGetResult&);
  TransactionGetResult() : found(0) {
  }

  virtual ~TransactionGetResult() throw();
  APIResponse status;
  bool found;
  SealedTransaction transaction;

  _TransactionGetResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_found(const bool val);

  void __set_transaction(const SealedTransaction& val);

  bool operator == (const TransactionGetResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(found == rhs.found))
      return false;
    if (!(transaction == rhs.transaction))
      return false;
    return true;
  }
  bool operator != (const TransactionGetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransactionGetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TransactionGetResult &a, TransactionGetResult &b);

std::ostream& operator<<(std::ostream& out, const TransactionGetResult& obj);

typedef struct _TransactionsGetResult__isset {
  _TransactionsGetResult__isset() : status(false), result(false), transactions(false) {}
  bool status :1;
  bool result :1;
  bool transactions :1;
} _TransactionsGetResult__isset;

class TransactionsGetResult : public virtual ::apache::thrift::TBase {
 public:

  TransactionsGetResult(const TransactionsGetResult&);
  TransactionsGetResult& operator=(const TransactionsGetResult&);
  TransactionsGetResult() : result(0) {
  }

  virtual ~TransactionsGetResult() throw();
  APIResponse status;
  bool result;
  std::vector<SealedTransaction>  transactions;

  _TransactionsGetResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_result(const bool val);

  void __set_transactions(const std::vector<SealedTransaction> & val);

  bool operator == (const TransactionsGetResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(result == rhs.result))
      return false;
    if (!(transactions == rhs.transactions))
      return false;
    return true;
  }
  bool operator != (const TransactionsGetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransactionsGetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TransactionsGetResult &a, TransactionsGetResult &b);

std::ostream& operator<<(std::ostream& out, const TransactionsGetResult& obj);

typedef struct _TransactionFlowResult__isset {
  _TransactionFlowResult__isset() : status(false), smart_contract_result(false) {}
  bool status :1;
  bool smart_contract_result :1;
} _TransactionFlowResult__isset;

class TransactionFlowResult : public virtual ::apache::thrift::TBase {
 public:

  TransactionFlowResult(const TransactionFlowResult&);
  TransactionFlowResult& operator=(const TransactionFlowResult&);
  TransactionFlowResult() {
  }

  virtual ~TransactionFlowResult() throw();
  APIResponse status;
   ::variant::Variant smart_contract_result;

  _TransactionFlowResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_smart_contract_result(const  ::variant::Variant& val);

  bool operator == (const TransactionFlowResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.smart_contract_result != rhs.__isset.smart_contract_result)
      return false;
    else if (__isset.smart_contract_result && !(smart_contract_result == rhs.smart_contract_result))
      return false;
    return true;
  }
  bool operator != (const TransactionFlowResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransactionFlowResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TransactionFlowResult &a, TransactionFlowResult &b);

std::ostream& operator<<(std::ostream& out, const TransactionFlowResult& obj);

typedef struct _PoolListGetResult__isset {
  _PoolListGetResult__isset() : status(false), result(false), pools(false) {}
  bool status :1;
  bool result :1;
  bool pools :1;
} _PoolListGetResult__isset;

class PoolListGetResult : public virtual ::apache::thrift::TBase {
 public:

  PoolListGetResult(const PoolListGetResult&);
  PoolListGetResult& operator=(const PoolListGetResult&);
  PoolListGetResult() : result(0) {
  }

  virtual ~PoolListGetResult() throw();
  APIResponse status;
  bool result;
  std::vector<Pool>  pools;

  _PoolListGetResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_result(const bool val);

  void __set_pools(const std::vector<Pool> & val);

  bool operator == (const PoolListGetResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(result == rhs.result))
      return false;
    if (!(pools == rhs.pools))
      return false;
    return true;
  }
  bool operator != (const PoolListGetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PoolListGetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PoolListGetResult &a, PoolListGetResult &b);

std::ostream& operator<<(std::ostream& out, const PoolListGetResult& obj);

typedef struct _PoolInfoGetResult__isset {
  _PoolInfoGetResult__isset() : status(false), isFound(false), pool(false) {}
  bool status :1;
  bool isFound :1;
  bool pool :1;
} _PoolInfoGetResult__isset;

class PoolInfoGetResult : public virtual ::apache::thrift::TBase {
 public:

  PoolInfoGetResult(const PoolInfoGetResult&);
  PoolInfoGetResult& operator=(const PoolInfoGetResult&);
  PoolInfoGetResult() : isFound(0) {
  }

  virtual ~PoolInfoGetResult() throw();
  APIResponse status;
  bool isFound;
  Pool pool;

  _PoolInfoGetResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_isFound(const bool val);

  void __set_pool(const Pool& val);

  bool operator == (const PoolInfoGetResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(isFound == rhs.isFound))
      return false;
    if (!(pool == rhs.pool))
      return false;
    return true;
  }
  bool operator != (const PoolInfoGetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PoolInfoGetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PoolInfoGetResult &a, PoolInfoGetResult &b);

std::ostream& operator<<(std::ostream& out, const PoolInfoGetResult& obj);

typedef struct _PoolTransactionsGetResult__isset {
  _PoolTransactionsGetResult__isset() : status(false), transactions(false) {}
  bool status :1;
  bool transactions :1;
} _PoolTransactionsGetResult__isset;

class PoolTransactionsGetResult : public virtual ::apache::thrift::TBase {
 public:

  PoolTransactionsGetResult(const PoolTransactionsGetResult&);
  PoolTransactionsGetResult& operator=(const PoolTransactionsGetResult&);
  PoolTransactionsGetResult() {
  }

  virtual ~PoolTransactionsGetResult() throw();
  APIResponse status;
  std::vector<SealedTransaction>  transactions;

  _PoolTransactionsGetResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_transactions(const std::vector<SealedTransaction> & val);

  bool operator == (const PoolTransactionsGetResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(transactions == rhs.transactions))
      return false;
    return true;
  }
  bool operator != (const PoolTransactionsGetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PoolTransactionsGetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PoolTransactionsGetResult &a, PoolTransactionsGetResult &b);

std::ostream& operator<<(std::ostream& out, const PoolTransactionsGetResult& obj);

typedef struct _StatsGetResult__isset {
  _StatsGetResult__isset() : status(false), stats(false) {}
  bool status :1;
  bool stats :1;
} _StatsGetResult__isset;

class StatsGetResult : public virtual ::apache::thrift::TBase {
 public:

  StatsGetResult(const StatsGetResult&);
  StatsGetResult& operator=(const StatsGetResult&);
  StatsGetResult() {
  }

  virtual ~StatsGetResult() throw();
  APIResponse status;
  StatsPerPeriod stats;

  _StatsGetResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_stats(const StatsPerPeriod& val);

  bool operator == (const StatsGetResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(stats == rhs.stats))
      return false;
    return true;
  }
  bool operator != (const StatsGetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatsGetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StatsGetResult &a, StatsGetResult &b);

std::ostream& operator<<(std::ostream& out, const StatsGetResult& obj);

typedef struct _SmartContractGetResult__isset {
  _SmartContractGetResult__isset() : status(false), smartContract(false) {}
  bool status :1;
  bool smartContract :1;
} _SmartContractGetResult__isset;

class SmartContractGetResult : public virtual ::apache::thrift::TBase {
 public:

  SmartContractGetResult(const SmartContractGetResult&);
  SmartContractGetResult& operator=(const SmartContractGetResult&);
  SmartContractGetResult() {
  }

  virtual ~SmartContractGetResult() throw();
  APIResponse status;
  SmartContract smartContract;

  _SmartContractGetResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_smartContract(const SmartContract& val);

  bool operator == (const SmartContractGetResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(smartContract == rhs.smartContract))
      return false;
    return true;
  }
  bool operator != (const SmartContractGetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SmartContractGetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SmartContractGetResult &a, SmartContractGetResult &b);

std::ostream& operator<<(std::ostream& out, const SmartContractGetResult& obj);

typedef struct _SmartContractAddressesListGetResult__isset {
  _SmartContractAddressesListGetResult__isset() : status(false), addressesList(false) {}
  bool status :1;
  bool addressesList :1;
} _SmartContractAddressesListGetResult__isset;

class SmartContractAddressesListGetResult : public virtual ::apache::thrift::TBase {
 public:

  SmartContractAddressesListGetResult(const SmartContractAddressesListGetResult&);
  SmartContractAddressesListGetResult& operator=(const SmartContractAddressesListGetResult&);
  SmartContractAddressesListGetResult() {
  }

  virtual ~SmartContractAddressesListGetResult() throw();
  APIResponse status;
  std::vector<Address>  addressesList;

  _SmartContractAddressesListGetResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_addressesList(const std::vector<Address> & val);

  bool operator == (const SmartContractAddressesListGetResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(addressesList == rhs.addressesList))
      return false;
    return true;
  }
  bool operator != (const SmartContractAddressesListGetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SmartContractAddressesListGetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SmartContractAddressesListGetResult &a, SmartContractAddressesListGetResult &b);

std::ostream& operator<<(std::ostream& out, const SmartContractAddressesListGetResult& obj);

typedef struct _SmartContractsListGetResult__isset {
  _SmartContractsListGetResult__isset() : status(false), smartContractsList(false) {}
  bool status :1;
  bool smartContractsList :1;
} _SmartContractsListGetResult__isset;

class SmartContractsListGetResult : public virtual ::apache::thrift::TBase {
 public:

  SmartContractsListGetResult(const SmartContractsListGetResult&);
  SmartContractsListGetResult& operator=(const SmartContractsListGetResult&);
  SmartContractsListGetResult() {
  }

  virtual ~SmartContractsListGetResult() throw();
  APIResponse status;
  std::vector<SmartContract>  smartContractsList;

  _SmartContractsListGetResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_smartContractsList(const std::vector<SmartContract> & val);

  bool operator == (const SmartContractsListGetResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(smartContractsList == rhs.smartContractsList))
      return false;
    return true;
  }
  bool operator != (const SmartContractsListGetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SmartContractsListGetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SmartContractsListGetResult &a, SmartContractsListGetResult &b);

std::ostream& operator<<(std::ostream& out, const SmartContractsListGetResult& obj);

typedef struct _SmartMethodParamsGetResult__isset {
  _SmartMethodParamsGetResult__isset() : status(false), method(false), params(false) {}
  bool status :1;
  bool method :1;
  bool params :1;
} _SmartMethodParamsGetResult__isset;

class SmartMethodParamsGetResult : public virtual ::apache::thrift::TBase {
 public:

  SmartMethodParamsGetResult(const SmartMethodParamsGetResult&);
  SmartMethodParamsGetResult& operator=(const SmartMethodParamsGetResult&);
  SmartMethodParamsGetResult() : method() {
  }

  virtual ~SmartMethodParamsGetResult() throw();
  APIResponse status;
  std::string method;
  std::vector<std::string>  params;

  _SmartMethodParamsGetResult__isset __isset;

  void __set_status(const APIResponse& val);

  void __set_method(const std::string& val);

  void __set_params(const std::vector<std::string> & val);

  bool operator == (const SmartMethodParamsGetResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(params == rhs.params))
      return false;
    return true;
  }
  bool operator != (const SmartMethodParamsGetResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SmartMethodParamsGetResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SmartMethodParamsGetResult &a, SmartMethodParamsGetResult &b);

std::ostream& operator<<(std::ostream& out, const SmartMethodParamsGetResult& obj);

} // namespace

#endif
