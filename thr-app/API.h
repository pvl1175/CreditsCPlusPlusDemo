/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef API_H
#define API_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "api_types.h"

namespace api {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class APIIf {
 public:
  virtual ~APIIf() {}
  virtual void BalanceGet(BalanceGetResult& _return, const Address& address, const Currency currency) = 0;
  virtual void TransactionGet(TransactionGetResult& _return, const TransactionId& transactionId) = 0;
  virtual void TransactionsGet(TransactionsGetResult& _return, const Address& address, const int64_t offset, const int64_t limit) = 0;
  virtual void TransactionFlow(TransactionFlowResult& _return, const Transaction& transaction) = 0;
  virtual void GetLastHash(PoolHash& _return) = 0;
  virtual void PoolListGetStable(PoolListGetResult& _return, const PoolHash& hash, const int64_t limit) = 0;
  virtual void PoolListGet(PoolListGetResult& _return, const int64_t offset, const int64_t limit) = 0;
  virtual void PoolInfoGet(PoolInfoGetResult& _return, const PoolHash& hash, const int64_t index) = 0;
  virtual void PoolTransactionsGet(PoolTransactionsGetResult& _return, const PoolHash& hash, const int64_t offset, const int64_t limit) = 0;
  virtual void StatsGet(StatsGetResult& _return) = 0;
  virtual void SmartContractGet(SmartContractGetResult& _return, const Address& address) = 0;
  virtual void SmartContractsListGet(SmartContractsListGetResult& _return, const Address& deployer) = 0;
  virtual void SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return, const Address& deployer) = 0;
  virtual void WaitForBlock(PoolHash& _return, const PoolHash& obsolete) = 0;
  virtual void WaitForSmartTransaction(TransactionId& _return, const Address& smart_address) = 0;
  virtual void SmartContractsAllListGet(SmartContractsListGetResult& _return, const int64_t offset, const int64_t limit) = 0;
  virtual void SmartMethodParamsGet(SmartMethodParamsGetResult& _return, const Address& address, const int64_t id) = 0;
};

class APIIfFactory {
 public:
  typedef APIIf Handler;

  virtual ~APIIfFactory() {}

  virtual APIIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(APIIf* /* handler */) = 0;
};

class APIIfSingletonFactory : virtual public APIIfFactory {
 public:
  APIIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<APIIf>& iface) : iface_(iface) {}
  virtual ~APIIfSingletonFactory() {}

  virtual APIIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(APIIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<APIIf> iface_;
};

class APINull : virtual public APIIf {
 public:
  virtual ~APINull() {}
  void BalanceGet(BalanceGetResult& /* _return */, const Address& /* address */, const Currency /* currency */) {
    return;
  }
  void TransactionGet(TransactionGetResult& /* _return */, const TransactionId& /* transactionId */) {
    return;
  }
  void TransactionsGet(TransactionsGetResult& /* _return */, const Address& /* address */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void TransactionFlow(TransactionFlowResult& /* _return */, const Transaction& /* transaction */) {
    return;
  }
  void GetLastHash(PoolHash& /* _return */) {
    return;
  }
  void PoolListGetStable(PoolListGetResult& /* _return */, const PoolHash& /* hash */, const int64_t /* limit */) {
    return;
  }
  void PoolListGet(PoolListGetResult& /* _return */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void PoolInfoGet(PoolInfoGetResult& /* _return */, const PoolHash& /* hash */, const int64_t /* index */) {
    return;
  }
  void PoolTransactionsGet(PoolTransactionsGetResult& /* _return */, const PoolHash& /* hash */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void StatsGet(StatsGetResult& /* _return */) {
    return;
  }
  void SmartContractGet(SmartContractGetResult& /* _return */, const Address& /* address */) {
    return;
  }
  void SmartContractsListGet(SmartContractsListGetResult& /* _return */, const Address& /* deployer */) {
    return;
  }
  void SmartContractAddressesListGet(SmartContractAddressesListGetResult& /* _return */, const Address& /* deployer */) {
    return;
  }
  void WaitForBlock(PoolHash& /* _return */, const PoolHash& /* obsolete */) {
    return;
  }
  void WaitForSmartTransaction(TransactionId& /* _return */, const Address& /* smart_address */) {
    return;
  }
  void SmartContractsAllListGet(SmartContractsListGetResult& /* _return */, const int64_t /* offset */, const int64_t /* limit */) {
    return;
  }
  void SmartMethodParamsGet(SmartMethodParamsGetResult& /* _return */, const Address& /* address */, const int64_t /* id */) {
    return;
  }
};

typedef struct _API_BalanceGet_args__isset {
  _API_BalanceGet_args__isset() : address(false), currency(true) {}
  bool address :1;
  bool currency :1;
} _API_BalanceGet_args__isset;

class API_BalanceGet_args {
 public:

  API_BalanceGet_args(const API_BalanceGet_args&);
  API_BalanceGet_args& operator=(const API_BalanceGet_args&);
  API_BalanceGet_args() : address(), currency(1) {
  }

  virtual ~API_BalanceGet_args() throw();
  Address address;
  Currency currency;

  _API_BalanceGet_args__isset __isset;

  void __set_address(const Address& val);

  void __set_currency(const Currency val);

  bool operator == (const API_BalanceGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(currency == rhs.currency))
      return false;
    return true;
  }
  bool operator != (const API_BalanceGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_BalanceGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_BalanceGet_pargs {
 public:


  virtual ~API_BalanceGet_pargs() throw();
  const Address* address;
  const Currency* currency;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_BalanceGet_result__isset {
  _API_BalanceGet_result__isset() : success(false) {}
  bool success :1;
} _API_BalanceGet_result__isset;

class API_BalanceGet_result {
 public:

  API_BalanceGet_result(const API_BalanceGet_result&);
  API_BalanceGet_result& operator=(const API_BalanceGet_result&);
  API_BalanceGet_result() {
  }

  virtual ~API_BalanceGet_result() throw();
  BalanceGetResult success;

  _API_BalanceGet_result__isset __isset;

  void __set_success(const BalanceGetResult& val);

  bool operator == (const API_BalanceGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_BalanceGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_BalanceGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_BalanceGet_presult__isset {
  _API_BalanceGet_presult__isset() : success(false) {}
  bool success :1;
} _API_BalanceGet_presult__isset;

class API_BalanceGet_presult {
 public:


  virtual ~API_BalanceGet_presult() throw();
  BalanceGetResult* success;

  _API_BalanceGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TransactionGet_args__isset {
  _API_TransactionGet_args__isset() : transactionId(false) {}
  bool transactionId :1;
} _API_TransactionGet_args__isset;

class API_TransactionGet_args {
 public:

  API_TransactionGet_args(const API_TransactionGet_args&);
  API_TransactionGet_args& operator=(const API_TransactionGet_args&);
  API_TransactionGet_args() {
  }

  virtual ~API_TransactionGet_args() throw();
  TransactionId transactionId;

  _API_TransactionGet_args__isset __isset;

  void __set_transactionId(const TransactionId& val);

  bool operator == (const API_TransactionGet_args & rhs) const
  {
    if (!(transactionId == rhs.transactionId))
      return false;
    return true;
  }
  bool operator != (const API_TransactionGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TransactionGet_pargs {
 public:


  virtual ~API_TransactionGet_pargs() throw();
  const TransactionId* transactionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionGet_result__isset {
  _API_TransactionGet_result__isset() : success(false) {}
  bool success :1;
} _API_TransactionGet_result__isset;

class API_TransactionGet_result {
 public:

  API_TransactionGet_result(const API_TransactionGet_result&);
  API_TransactionGet_result& operator=(const API_TransactionGet_result&);
  API_TransactionGet_result() {
  }

  virtual ~API_TransactionGet_result() throw();
  TransactionGetResult success;

  _API_TransactionGet_result__isset __isset;

  void __set_success(const TransactionGetResult& val);

  bool operator == (const API_TransactionGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TransactionGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionGet_presult__isset {
  _API_TransactionGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TransactionGet_presult__isset;

class API_TransactionGet_presult {
 public:


  virtual ~API_TransactionGet_presult() throw();
  TransactionGetResult* success;

  _API_TransactionGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TransactionsGet_args__isset {
  _API_TransactionsGet_args__isset() : address(false), offset(false), limit(false) {}
  bool address :1;
  bool offset :1;
  bool limit :1;
} _API_TransactionsGet_args__isset;

class API_TransactionsGet_args {
 public:

  API_TransactionsGet_args(const API_TransactionsGet_args&);
  API_TransactionsGet_args& operator=(const API_TransactionsGet_args&);
  API_TransactionsGet_args() : address(), offset(0), limit(0) {
  }

  virtual ~API_TransactionsGet_args() throw();
  Address address;
  int64_t offset;
  int64_t limit;

  _API_TransactionsGet_args__isset __isset;

  void __set_address(const Address& val);

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_TransactionsGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_TransactionsGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionsGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TransactionsGet_pargs {
 public:


  virtual ~API_TransactionsGet_pargs() throw();
  const Address* address;
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionsGet_result__isset {
  _API_TransactionsGet_result__isset() : success(false) {}
  bool success :1;
} _API_TransactionsGet_result__isset;

class API_TransactionsGet_result {
 public:

  API_TransactionsGet_result(const API_TransactionsGet_result&);
  API_TransactionsGet_result& operator=(const API_TransactionsGet_result&);
  API_TransactionsGet_result() {
  }

  virtual ~API_TransactionsGet_result() throw();
  TransactionsGetResult success;

  _API_TransactionsGet_result__isset __isset;

  void __set_success(const TransactionsGetResult& val);

  bool operator == (const API_TransactionsGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TransactionsGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionsGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionsGet_presult__isset {
  _API_TransactionsGet_presult__isset() : success(false) {}
  bool success :1;
} _API_TransactionsGet_presult__isset;

class API_TransactionsGet_presult {
 public:


  virtual ~API_TransactionsGet_presult() throw();
  TransactionsGetResult* success;

  _API_TransactionsGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_TransactionFlow_args__isset {
  _API_TransactionFlow_args__isset() : transaction(false) {}
  bool transaction :1;
} _API_TransactionFlow_args__isset;

class API_TransactionFlow_args {
 public:

  API_TransactionFlow_args(const API_TransactionFlow_args&);
  API_TransactionFlow_args& operator=(const API_TransactionFlow_args&);
  API_TransactionFlow_args() {
  }

  virtual ~API_TransactionFlow_args() throw();
  Transaction transaction;

  _API_TransactionFlow_args__isset __isset;

  void __set_transaction(const Transaction& val);

  bool operator == (const API_TransactionFlow_args & rhs) const
  {
    if (!(transaction == rhs.transaction))
      return false;
    return true;
  }
  bool operator != (const API_TransactionFlow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionFlow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_TransactionFlow_pargs {
 public:


  virtual ~API_TransactionFlow_pargs() throw();
  const Transaction* transaction;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionFlow_result__isset {
  _API_TransactionFlow_result__isset() : success(false) {}
  bool success :1;
} _API_TransactionFlow_result__isset;

class API_TransactionFlow_result {
 public:

  API_TransactionFlow_result(const API_TransactionFlow_result&);
  API_TransactionFlow_result& operator=(const API_TransactionFlow_result&);
  API_TransactionFlow_result() {
  }

  virtual ~API_TransactionFlow_result() throw();
  TransactionFlowResult success;

  _API_TransactionFlow_result__isset __isset;

  void __set_success(const TransactionFlowResult& val);

  bool operator == (const API_TransactionFlow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_TransactionFlow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_TransactionFlow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_TransactionFlow_presult__isset {
  _API_TransactionFlow_presult__isset() : success(false) {}
  bool success :1;
} _API_TransactionFlow_presult__isset;

class API_TransactionFlow_presult {
 public:


  virtual ~API_TransactionFlow_presult() throw();
  TransactionFlowResult* success;

  _API_TransactionFlow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class API_GetLastHash_args {
 public:

  API_GetLastHash_args(const API_GetLastHash_args&);
  API_GetLastHash_args& operator=(const API_GetLastHash_args&);
  API_GetLastHash_args() {
  }

  virtual ~API_GetLastHash_args() throw();

  bool operator == (const API_GetLastHash_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const API_GetLastHash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_GetLastHash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_GetLastHash_pargs {
 public:


  virtual ~API_GetLastHash_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_GetLastHash_result__isset {
  _API_GetLastHash_result__isset() : success(false) {}
  bool success :1;
} _API_GetLastHash_result__isset;

class API_GetLastHash_result {
 public:

  API_GetLastHash_result(const API_GetLastHash_result&);
  API_GetLastHash_result& operator=(const API_GetLastHash_result&);
  API_GetLastHash_result() : success() {
  }

  virtual ~API_GetLastHash_result() throw();
  PoolHash success;

  _API_GetLastHash_result__isset __isset;

  void __set_success(const PoolHash& val);

  bool operator == (const API_GetLastHash_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_GetLastHash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_GetLastHash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_GetLastHash_presult__isset {
  _API_GetLastHash_presult__isset() : success(false) {}
  bool success :1;
} _API_GetLastHash_presult__isset;

class API_GetLastHash_presult {
 public:


  virtual ~API_GetLastHash_presult() throw();
  PoolHash* success;

  _API_GetLastHash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_PoolListGetStable_args__isset {
  _API_PoolListGetStable_args__isset() : hash(false), limit(false) {}
  bool hash :1;
  bool limit :1;
} _API_PoolListGetStable_args__isset;

class API_PoolListGetStable_args {
 public:

  API_PoolListGetStable_args(const API_PoolListGetStable_args&);
  API_PoolListGetStable_args& operator=(const API_PoolListGetStable_args&);
  API_PoolListGetStable_args() : hash(), limit(0) {
  }

  virtual ~API_PoolListGetStable_args() throw();
  PoolHash hash;
  int64_t limit;

  _API_PoolListGetStable_args__isset __isset;

  void __set_hash(const PoolHash& val);

  void __set_limit(const int64_t val);

  bool operator == (const API_PoolListGetStable_args & rhs) const
  {
    if (!(hash == rhs.hash))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_PoolListGetStable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolListGetStable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_PoolListGetStable_pargs {
 public:


  virtual ~API_PoolListGetStable_pargs() throw();
  const PoolHash* hash;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolListGetStable_result__isset {
  _API_PoolListGetStable_result__isset() : success(false) {}
  bool success :1;
} _API_PoolListGetStable_result__isset;

class API_PoolListGetStable_result {
 public:

  API_PoolListGetStable_result(const API_PoolListGetStable_result&);
  API_PoolListGetStable_result& operator=(const API_PoolListGetStable_result&);
  API_PoolListGetStable_result() {
  }

  virtual ~API_PoolListGetStable_result() throw();
  PoolListGetResult success;

  _API_PoolListGetStable_result__isset __isset;

  void __set_success(const PoolListGetResult& val);

  bool operator == (const API_PoolListGetStable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_PoolListGetStable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolListGetStable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolListGetStable_presult__isset {
  _API_PoolListGetStable_presult__isset() : success(false) {}
  bool success :1;
} _API_PoolListGetStable_presult__isset;

class API_PoolListGetStable_presult {
 public:


  virtual ~API_PoolListGetStable_presult() throw();
  PoolListGetResult* success;

  _API_PoolListGetStable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_PoolListGet_args__isset {
  _API_PoolListGet_args__isset() : offset(false), limit(false) {}
  bool offset :1;
  bool limit :1;
} _API_PoolListGet_args__isset;

class API_PoolListGet_args {
 public:

  API_PoolListGet_args(const API_PoolListGet_args&);
  API_PoolListGet_args& operator=(const API_PoolListGet_args&);
  API_PoolListGet_args() : offset(0), limit(0) {
  }

  virtual ~API_PoolListGet_args() throw();
  int64_t offset;
  int64_t limit;

  _API_PoolListGet_args__isset __isset;

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_PoolListGet_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_PoolListGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolListGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_PoolListGet_pargs {
 public:


  virtual ~API_PoolListGet_pargs() throw();
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolListGet_result__isset {
  _API_PoolListGet_result__isset() : success(false) {}
  bool success :1;
} _API_PoolListGet_result__isset;

class API_PoolListGet_result {
 public:

  API_PoolListGet_result(const API_PoolListGet_result&);
  API_PoolListGet_result& operator=(const API_PoolListGet_result&);
  API_PoolListGet_result() {
  }

  virtual ~API_PoolListGet_result() throw();
  PoolListGetResult success;

  _API_PoolListGet_result__isset __isset;

  void __set_success(const PoolListGetResult& val);

  bool operator == (const API_PoolListGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_PoolListGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolListGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolListGet_presult__isset {
  _API_PoolListGet_presult__isset() : success(false) {}
  bool success :1;
} _API_PoolListGet_presult__isset;

class API_PoolListGet_presult {
 public:


  virtual ~API_PoolListGet_presult() throw();
  PoolListGetResult* success;

  _API_PoolListGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_PoolInfoGet_args__isset {
  _API_PoolInfoGet_args__isset() : hash(false), index(false) {}
  bool hash :1;
  bool index :1;
} _API_PoolInfoGet_args__isset;

class API_PoolInfoGet_args {
 public:

  API_PoolInfoGet_args(const API_PoolInfoGet_args&);
  API_PoolInfoGet_args& operator=(const API_PoolInfoGet_args&);
  API_PoolInfoGet_args() : hash(), index(0) {
  }

  virtual ~API_PoolInfoGet_args() throw();
  PoolHash hash;
  int64_t index;

  _API_PoolInfoGet_args__isset __isset;

  void __set_hash(const PoolHash& val);

  void __set_index(const int64_t val);

  bool operator == (const API_PoolInfoGet_args & rhs) const
  {
    if (!(hash == rhs.hash))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const API_PoolInfoGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolInfoGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_PoolInfoGet_pargs {
 public:


  virtual ~API_PoolInfoGet_pargs() throw();
  const PoolHash* hash;
  const int64_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolInfoGet_result__isset {
  _API_PoolInfoGet_result__isset() : success(false) {}
  bool success :1;
} _API_PoolInfoGet_result__isset;

class API_PoolInfoGet_result {
 public:

  API_PoolInfoGet_result(const API_PoolInfoGet_result&);
  API_PoolInfoGet_result& operator=(const API_PoolInfoGet_result&);
  API_PoolInfoGet_result() {
  }

  virtual ~API_PoolInfoGet_result() throw();
  PoolInfoGetResult success;

  _API_PoolInfoGet_result__isset __isset;

  void __set_success(const PoolInfoGetResult& val);

  bool operator == (const API_PoolInfoGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_PoolInfoGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolInfoGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolInfoGet_presult__isset {
  _API_PoolInfoGet_presult__isset() : success(false) {}
  bool success :1;
} _API_PoolInfoGet_presult__isset;

class API_PoolInfoGet_presult {
 public:


  virtual ~API_PoolInfoGet_presult() throw();
  PoolInfoGetResult* success;

  _API_PoolInfoGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_PoolTransactionsGet_args__isset {
  _API_PoolTransactionsGet_args__isset() : hash(false), offset(false), limit(false) {}
  bool hash :1;
  bool offset :1;
  bool limit :1;
} _API_PoolTransactionsGet_args__isset;

class API_PoolTransactionsGet_args {
 public:

  API_PoolTransactionsGet_args(const API_PoolTransactionsGet_args&);
  API_PoolTransactionsGet_args& operator=(const API_PoolTransactionsGet_args&);
  API_PoolTransactionsGet_args() : hash(), offset(0), limit(0) {
  }

  virtual ~API_PoolTransactionsGet_args() throw();
  PoolHash hash;
  int64_t offset;
  int64_t limit;

  _API_PoolTransactionsGet_args__isset __isset;

  void __set_hash(const PoolHash& val);

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_PoolTransactionsGet_args & rhs) const
  {
    if (!(hash == rhs.hash))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_PoolTransactionsGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolTransactionsGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_PoolTransactionsGet_pargs {
 public:


  virtual ~API_PoolTransactionsGet_pargs() throw();
  const PoolHash* hash;
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolTransactionsGet_result__isset {
  _API_PoolTransactionsGet_result__isset() : success(false) {}
  bool success :1;
} _API_PoolTransactionsGet_result__isset;

class API_PoolTransactionsGet_result {
 public:

  API_PoolTransactionsGet_result(const API_PoolTransactionsGet_result&);
  API_PoolTransactionsGet_result& operator=(const API_PoolTransactionsGet_result&);
  API_PoolTransactionsGet_result() {
  }

  virtual ~API_PoolTransactionsGet_result() throw();
  PoolTransactionsGetResult success;

  _API_PoolTransactionsGet_result__isset __isset;

  void __set_success(const PoolTransactionsGetResult& val);

  bool operator == (const API_PoolTransactionsGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_PoolTransactionsGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_PoolTransactionsGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_PoolTransactionsGet_presult__isset {
  _API_PoolTransactionsGet_presult__isset() : success(false) {}
  bool success :1;
} _API_PoolTransactionsGet_presult__isset;

class API_PoolTransactionsGet_presult {
 public:


  virtual ~API_PoolTransactionsGet_presult() throw();
  PoolTransactionsGetResult* success;

  _API_PoolTransactionsGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class API_StatsGet_args {
 public:

  API_StatsGet_args(const API_StatsGet_args&);
  API_StatsGet_args& operator=(const API_StatsGet_args&);
  API_StatsGet_args() {
  }

  virtual ~API_StatsGet_args() throw();

  bool operator == (const API_StatsGet_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const API_StatsGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_StatsGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_StatsGet_pargs {
 public:


  virtual ~API_StatsGet_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_StatsGet_result__isset {
  _API_StatsGet_result__isset() : success(false) {}
  bool success :1;
} _API_StatsGet_result__isset;

class API_StatsGet_result {
 public:

  API_StatsGet_result(const API_StatsGet_result&);
  API_StatsGet_result& operator=(const API_StatsGet_result&);
  API_StatsGet_result() {
  }

  virtual ~API_StatsGet_result() throw();
  StatsGetResult success;

  _API_StatsGet_result__isset __isset;

  void __set_success(const StatsGetResult& val);

  bool operator == (const API_StatsGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_StatsGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_StatsGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_StatsGet_presult__isset {
  _API_StatsGet_presult__isset() : success(false) {}
  bool success :1;
} _API_StatsGet_presult__isset;

class API_StatsGet_presult {
 public:


  virtual ~API_StatsGet_presult() throw();
  StatsGetResult* success;

  _API_StatsGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartContractGet_args__isset {
  _API_SmartContractGet_args__isset() : address(false) {}
  bool address :1;
} _API_SmartContractGet_args__isset;

class API_SmartContractGet_args {
 public:

  API_SmartContractGet_args(const API_SmartContractGet_args&);
  API_SmartContractGet_args& operator=(const API_SmartContractGet_args&);
  API_SmartContractGet_args() : address() {
  }

  virtual ~API_SmartContractGet_args() throw();
  Address address;

  _API_SmartContractGet_args__isset __isset;

  void __set_address(const Address& val);

  bool operator == (const API_SmartContractGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartContractGet_pargs {
 public:


  virtual ~API_SmartContractGet_pargs() throw();
  const Address* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractGet_result__isset {
  _API_SmartContractGet_result__isset() : success(false) {}
  bool success :1;
} _API_SmartContractGet_result__isset;

class API_SmartContractGet_result {
 public:

  API_SmartContractGet_result(const API_SmartContractGet_result&);
  API_SmartContractGet_result& operator=(const API_SmartContractGet_result&);
  API_SmartContractGet_result() {
  }

  virtual ~API_SmartContractGet_result() throw();
  SmartContractGetResult success;

  _API_SmartContractGet_result__isset __isset;

  void __set_success(const SmartContractGetResult& val);

  bool operator == (const API_SmartContractGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractGet_presult__isset {
  _API_SmartContractGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartContractGet_presult__isset;

class API_SmartContractGet_presult {
 public:


  virtual ~API_SmartContractGet_presult() throw();
  SmartContractGetResult* success;

  _API_SmartContractGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartContractsListGet_args__isset {
  _API_SmartContractsListGet_args__isset() : deployer(false) {}
  bool deployer :1;
} _API_SmartContractsListGet_args__isset;

class API_SmartContractsListGet_args {
 public:

  API_SmartContractsListGet_args(const API_SmartContractsListGet_args&);
  API_SmartContractsListGet_args& operator=(const API_SmartContractsListGet_args&);
  API_SmartContractsListGet_args() : deployer() {
  }

  virtual ~API_SmartContractsListGet_args() throw();
  Address deployer;

  _API_SmartContractsListGet_args__isset __isset;

  void __set_deployer(const Address& val);

  bool operator == (const API_SmartContractsListGet_args & rhs) const
  {
    if (!(deployer == rhs.deployer))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractsListGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractsListGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartContractsListGet_pargs {
 public:


  virtual ~API_SmartContractsListGet_pargs() throw();
  const Address* deployer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractsListGet_result__isset {
  _API_SmartContractsListGet_result__isset() : success(false) {}
  bool success :1;
} _API_SmartContractsListGet_result__isset;

class API_SmartContractsListGet_result {
 public:

  API_SmartContractsListGet_result(const API_SmartContractsListGet_result&);
  API_SmartContractsListGet_result& operator=(const API_SmartContractsListGet_result&);
  API_SmartContractsListGet_result() {
  }

  virtual ~API_SmartContractsListGet_result() throw();
  SmartContractsListGetResult success;

  _API_SmartContractsListGet_result__isset __isset;

  void __set_success(const SmartContractsListGetResult& val);

  bool operator == (const API_SmartContractsListGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractsListGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractsListGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractsListGet_presult__isset {
  _API_SmartContractsListGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartContractsListGet_presult__isset;

class API_SmartContractsListGet_presult {
 public:


  virtual ~API_SmartContractsListGet_presult() throw();
  SmartContractsListGetResult* success;

  _API_SmartContractsListGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartContractAddressesListGet_args__isset {
  _API_SmartContractAddressesListGet_args__isset() : deployer(false) {}
  bool deployer :1;
} _API_SmartContractAddressesListGet_args__isset;

class API_SmartContractAddressesListGet_args {
 public:

  API_SmartContractAddressesListGet_args(const API_SmartContractAddressesListGet_args&);
  API_SmartContractAddressesListGet_args& operator=(const API_SmartContractAddressesListGet_args&);
  API_SmartContractAddressesListGet_args() : deployer() {
  }

  virtual ~API_SmartContractAddressesListGet_args() throw();
  Address deployer;

  _API_SmartContractAddressesListGet_args__isset __isset;

  void __set_deployer(const Address& val);

  bool operator == (const API_SmartContractAddressesListGet_args & rhs) const
  {
    if (!(deployer == rhs.deployer))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractAddressesListGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractAddressesListGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartContractAddressesListGet_pargs {
 public:


  virtual ~API_SmartContractAddressesListGet_pargs() throw();
  const Address* deployer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractAddressesListGet_result__isset {
  _API_SmartContractAddressesListGet_result__isset() : success(false) {}
  bool success :1;
} _API_SmartContractAddressesListGet_result__isset;

class API_SmartContractAddressesListGet_result {
 public:

  API_SmartContractAddressesListGet_result(const API_SmartContractAddressesListGet_result&);
  API_SmartContractAddressesListGet_result& operator=(const API_SmartContractAddressesListGet_result&);
  API_SmartContractAddressesListGet_result() {
  }

  virtual ~API_SmartContractAddressesListGet_result() throw();
  SmartContractAddressesListGetResult success;

  _API_SmartContractAddressesListGet_result__isset __isset;

  void __set_success(const SmartContractAddressesListGetResult& val);

  bool operator == (const API_SmartContractAddressesListGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractAddressesListGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractAddressesListGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractAddressesListGet_presult__isset {
  _API_SmartContractAddressesListGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartContractAddressesListGet_presult__isset;

class API_SmartContractAddressesListGet_presult {
 public:


  virtual ~API_SmartContractAddressesListGet_presult() throw();
  SmartContractAddressesListGetResult* success;

  _API_SmartContractAddressesListGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_WaitForBlock_args__isset {
  _API_WaitForBlock_args__isset() : obsolete(false) {}
  bool obsolete :1;
} _API_WaitForBlock_args__isset;

class API_WaitForBlock_args {
 public:

  API_WaitForBlock_args(const API_WaitForBlock_args&);
  API_WaitForBlock_args& operator=(const API_WaitForBlock_args&);
  API_WaitForBlock_args() : obsolete() {
  }

  virtual ~API_WaitForBlock_args() throw();
  PoolHash obsolete;

  _API_WaitForBlock_args__isset __isset;

  void __set_obsolete(const PoolHash& val);

  bool operator == (const API_WaitForBlock_args & rhs) const
  {
    if (!(obsolete == rhs.obsolete))
      return false;
    return true;
  }
  bool operator != (const API_WaitForBlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WaitForBlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_WaitForBlock_pargs {
 public:


  virtual ~API_WaitForBlock_pargs() throw();
  const PoolHash* obsolete;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WaitForBlock_result__isset {
  _API_WaitForBlock_result__isset() : success(false) {}
  bool success :1;
} _API_WaitForBlock_result__isset;

class API_WaitForBlock_result {
 public:

  API_WaitForBlock_result(const API_WaitForBlock_result&);
  API_WaitForBlock_result& operator=(const API_WaitForBlock_result&);
  API_WaitForBlock_result() : success() {
  }

  virtual ~API_WaitForBlock_result() throw();
  PoolHash success;

  _API_WaitForBlock_result__isset __isset;

  void __set_success(const PoolHash& val);

  bool operator == (const API_WaitForBlock_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_WaitForBlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WaitForBlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WaitForBlock_presult__isset {
  _API_WaitForBlock_presult__isset() : success(false) {}
  bool success :1;
} _API_WaitForBlock_presult__isset;

class API_WaitForBlock_presult {
 public:


  virtual ~API_WaitForBlock_presult() throw();
  PoolHash* success;

  _API_WaitForBlock_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_WaitForSmartTransaction_args__isset {
  _API_WaitForSmartTransaction_args__isset() : smart_address(false) {}
  bool smart_address :1;
} _API_WaitForSmartTransaction_args__isset;

class API_WaitForSmartTransaction_args {
 public:

  API_WaitForSmartTransaction_args(const API_WaitForSmartTransaction_args&);
  API_WaitForSmartTransaction_args& operator=(const API_WaitForSmartTransaction_args&);
  API_WaitForSmartTransaction_args() : smart_address() {
  }

  virtual ~API_WaitForSmartTransaction_args() throw();
  Address smart_address;

  _API_WaitForSmartTransaction_args__isset __isset;

  void __set_smart_address(const Address& val);

  bool operator == (const API_WaitForSmartTransaction_args & rhs) const
  {
    if (!(smart_address == rhs.smart_address))
      return false;
    return true;
  }
  bool operator != (const API_WaitForSmartTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WaitForSmartTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_WaitForSmartTransaction_pargs {
 public:


  virtual ~API_WaitForSmartTransaction_pargs() throw();
  const Address* smart_address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WaitForSmartTransaction_result__isset {
  _API_WaitForSmartTransaction_result__isset() : success(false) {}
  bool success :1;
} _API_WaitForSmartTransaction_result__isset;

class API_WaitForSmartTransaction_result {
 public:

  API_WaitForSmartTransaction_result(const API_WaitForSmartTransaction_result&);
  API_WaitForSmartTransaction_result& operator=(const API_WaitForSmartTransaction_result&);
  API_WaitForSmartTransaction_result() {
  }

  virtual ~API_WaitForSmartTransaction_result() throw();
  TransactionId success;

  _API_WaitForSmartTransaction_result__isset __isset;

  void __set_success(const TransactionId& val);

  bool operator == (const API_WaitForSmartTransaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_WaitForSmartTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_WaitForSmartTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_WaitForSmartTransaction_presult__isset {
  _API_WaitForSmartTransaction_presult__isset() : success(false) {}
  bool success :1;
} _API_WaitForSmartTransaction_presult__isset;

class API_WaitForSmartTransaction_presult {
 public:


  virtual ~API_WaitForSmartTransaction_presult() throw();
  TransactionId* success;

  _API_WaitForSmartTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartContractsAllListGet_args__isset {
  _API_SmartContractsAllListGet_args__isset() : offset(false), limit(false) {}
  bool offset :1;
  bool limit :1;
} _API_SmartContractsAllListGet_args__isset;

class API_SmartContractsAllListGet_args {
 public:

  API_SmartContractsAllListGet_args(const API_SmartContractsAllListGet_args&);
  API_SmartContractsAllListGet_args& operator=(const API_SmartContractsAllListGet_args&);
  API_SmartContractsAllListGet_args() : offset(0), limit(0) {
  }

  virtual ~API_SmartContractsAllListGet_args() throw();
  int64_t offset;
  int64_t limit;

  _API_SmartContractsAllListGet_args__isset __isset;

  void __set_offset(const int64_t val);

  void __set_limit(const int64_t val);

  bool operator == (const API_SmartContractsAllListGet_args & rhs) const
  {
    if (!(offset == rhs.offset))
      return false;
    if (!(limit == rhs.limit))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractsAllListGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractsAllListGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartContractsAllListGet_pargs {
 public:


  virtual ~API_SmartContractsAllListGet_pargs() throw();
  const int64_t* offset;
  const int64_t* limit;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractsAllListGet_result__isset {
  _API_SmartContractsAllListGet_result__isset() : success(false) {}
  bool success :1;
} _API_SmartContractsAllListGet_result__isset;

class API_SmartContractsAllListGet_result {
 public:

  API_SmartContractsAllListGet_result(const API_SmartContractsAllListGet_result&);
  API_SmartContractsAllListGet_result& operator=(const API_SmartContractsAllListGet_result&);
  API_SmartContractsAllListGet_result() {
  }

  virtual ~API_SmartContractsAllListGet_result() throw();
  SmartContractsListGetResult success;

  _API_SmartContractsAllListGet_result__isset __isset;

  void __set_success(const SmartContractsListGetResult& val);

  bool operator == (const API_SmartContractsAllListGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartContractsAllListGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartContractsAllListGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartContractsAllListGet_presult__isset {
  _API_SmartContractsAllListGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartContractsAllListGet_presult__isset;

class API_SmartContractsAllListGet_presult {
 public:


  virtual ~API_SmartContractsAllListGet_presult() throw();
  SmartContractsListGetResult* success;

  _API_SmartContractsAllListGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _API_SmartMethodParamsGet_args__isset {
  _API_SmartMethodParamsGet_args__isset() : address(false), id(false) {}
  bool address :1;
  bool id :1;
} _API_SmartMethodParamsGet_args__isset;

class API_SmartMethodParamsGet_args {
 public:

  API_SmartMethodParamsGet_args(const API_SmartMethodParamsGet_args&);
  API_SmartMethodParamsGet_args& operator=(const API_SmartMethodParamsGet_args&);
  API_SmartMethodParamsGet_args() : address(), id(0) {
  }

  virtual ~API_SmartMethodParamsGet_args() throw();
  Address address;
  int64_t id;

  _API_SmartMethodParamsGet_args__isset __isset;

  void __set_address(const Address& val);

  void __set_id(const int64_t val);

  bool operator == (const API_SmartMethodParamsGet_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const API_SmartMethodParamsGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartMethodParamsGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class API_SmartMethodParamsGet_pargs {
 public:


  virtual ~API_SmartMethodParamsGet_pargs() throw();
  const Address* address;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartMethodParamsGet_result__isset {
  _API_SmartMethodParamsGet_result__isset() : success(false) {}
  bool success :1;
} _API_SmartMethodParamsGet_result__isset;

class API_SmartMethodParamsGet_result {
 public:

  API_SmartMethodParamsGet_result(const API_SmartMethodParamsGet_result&);
  API_SmartMethodParamsGet_result& operator=(const API_SmartMethodParamsGet_result&);
  API_SmartMethodParamsGet_result() {
  }

  virtual ~API_SmartMethodParamsGet_result() throw();
  SmartMethodParamsGetResult success;

  _API_SmartMethodParamsGet_result__isset __isset;

  void __set_success(const SmartMethodParamsGetResult& val);

  bool operator == (const API_SmartMethodParamsGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const API_SmartMethodParamsGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const API_SmartMethodParamsGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _API_SmartMethodParamsGet_presult__isset {
  _API_SmartMethodParamsGet_presult__isset() : success(false) {}
  bool success :1;
} _API_SmartMethodParamsGet_presult__isset;

class API_SmartMethodParamsGet_presult {
 public:


  virtual ~API_SmartMethodParamsGet_presult() throw();
  SmartMethodParamsGetResult* success;

  _API_SmartMethodParamsGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class APIClient : virtual public APIIf {
 public:
  APIClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  APIClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void BalanceGet(BalanceGetResult& _return, const Address& address, const Currency currency);
  void send_BalanceGet(const Address& address, const Currency currency);
  void recv_BalanceGet(BalanceGetResult& _return);
  void TransactionGet(TransactionGetResult& _return, const TransactionId& transactionId);
  void send_TransactionGet(const TransactionId& transactionId);
  void recv_TransactionGet(TransactionGetResult& _return);
  void TransactionsGet(TransactionsGetResult& _return, const Address& address, const int64_t offset, const int64_t limit);
  void send_TransactionsGet(const Address& address, const int64_t offset, const int64_t limit);
  void recv_TransactionsGet(TransactionsGetResult& _return);
  void TransactionFlow(TransactionFlowResult& _return, const Transaction& transaction);
  void send_TransactionFlow(const Transaction& transaction);
  void recv_TransactionFlow(TransactionFlowResult& _return);
  void GetLastHash(PoolHash& _return);
  void send_GetLastHash();
  void recv_GetLastHash(PoolHash& _return);
  void PoolListGetStable(PoolListGetResult& _return, const PoolHash& hash, const int64_t limit);
  void send_PoolListGetStable(const PoolHash& hash, const int64_t limit);
  void recv_PoolListGetStable(PoolListGetResult& _return);
  void PoolListGet(PoolListGetResult& _return, const int64_t offset, const int64_t limit);
  void send_PoolListGet(const int64_t offset, const int64_t limit);
  void recv_PoolListGet(PoolListGetResult& _return);
  void PoolInfoGet(PoolInfoGetResult& _return, const PoolHash& hash, const int64_t index);
  void send_PoolInfoGet(const PoolHash& hash, const int64_t index);
  void recv_PoolInfoGet(PoolInfoGetResult& _return);
  void PoolTransactionsGet(PoolTransactionsGetResult& _return, const PoolHash& hash, const int64_t offset, const int64_t limit);
  void send_PoolTransactionsGet(const PoolHash& hash, const int64_t offset, const int64_t limit);
  void recv_PoolTransactionsGet(PoolTransactionsGetResult& _return);
  void StatsGet(StatsGetResult& _return);
  void send_StatsGet();
  void recv_StatsGet(StatsGetResult& _return);
  void SmartContractGet(SmartContractGetResult& _return, const Address& address);
  void send_SmartContractGet(const Address& address);
  void recv_SmartContractGet(SmartContractGetResult& _return);
  void SmartContractsListGet(SmartContractsListGetResult& _return, const Address& deployer);
  void send_SmartContractsListGet(const Address& deployer);
  void recv_SmartContractsListGet(SmartContractsListGetResult& _return);
  void SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return, const Address& deployer);
  void send_SmartContractAddressesListGet(const Address& deployer);
  void recv_SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return);
  void WaitForBlock(PoolHash& _return, const PoolHash& obsolete);
  void send_WaitForBlock(const PoolHash& obsolete);
  void recv_WaitForBlock(PoolHash& _return);
  void WaitForSmartTransaction(TransactionId& _return, const Address& smart_address);
  void send_WaitForSmartTransaction(const Address& smart_address);
  void recv_WaitForSmartTransaction(TransactionId& _return);
  void SmartContractsAllListGet(SmartContractsListGetResult& _return, const int64_t offset, const int64_t limit);
  void send_SmartContractsAllListGet(const int64_t offset, const int64_t limit);
  void recv_SmartContractsAllListGet(SmartContractsListGetResult& _return);
  void SmartMethodParamsGet(SmartMethodParamsGetResult& _return, const Address& address, const int64_t id);
  void send_SmartMethodParamsGet(const Address& address, const int64_t id);
  void recv_SmartMethodParamsGet(SmartMethodParamsGetResult& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class APIProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<APIIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (APIProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_BalanceGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransactionGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransactionsGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_TransactionFlow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetLastHash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PoolListGetStable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PoolListGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PoolInfoGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PoolTransactionsGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_StatsGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartContractGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartContractsListGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartContractAddressesListGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WaitForBlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WaitForSmartTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartContractsAllListGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SmartMethodParamsGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  APIProcessor(::apache::thrift::stdcxx::shared_ptr<APIIf> iface) :
    iface_(iface) {
    processMap_["BalanceGet"] = &APIProcessor::process_BalanceGet;
    processMap_["TransactionGet"] = &APIProcessor::process_TransactionGet;
    processMap_["TransactionsGet"] = &APIProcessor::process_TransactionsGet;
    processMap_["TransactionFlow"] = &APIProcessor::process_TransactionFlow;
    processMap_["GetLastHash"] = &APIProcessor::process_GetLastHash;
    processMap_["PoolListGetStable"] = &APIProcessor::process_PoolListGetStable;
    processMap_["PoolListGet"] = &APIProcessor::process_PoolListGet;
    processMap_["PoolInfoGet"] = &APIProcessor::process_PoolInfoGet;
    processMap_["PoolTransactionsGet"] = &APIProcessor::process_PoolTransactionsGet;
    processMap_["StatsGet"] = &APIProcessor::process_StatsGet;
    processMap_["SmartContractGet"] = &APIProcessor::process_SmartContractGet;
    processMap_["SmartContractsListGet"] = &APIProcessor::process_SmartContractsListGet;
    processMap_["SmartContractAddressesListGet"] = &APIProcessor::process_SmartContractAddressesListGet;
    processMap_["WaitForBlock"] = &APIProcessor::process_WaitForBlock;
    processMap_["WaitForSmartTransaction"] = &APIProcessor::process_WaitForSmartTransaction;
    processMap_["SmartContractsAllListGet"] = &APIProcessor::process_SmartContractsAllListGet;
    processMap_["SmartMethodParamsGet"] = &APIProcessor::process_SmartMethodParamsGet;
  }

  virtual ~APIProcessor() {}
};

class APIProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  APIProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< APIIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< APIIfFactory > handlerFactory_;
};

class APIMultiface : virtual public APIIf {
 public:
  APIMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<APIIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~APIMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<APIIf> > ifaces_;
  APIMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<APIIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void BalanceGet(BalanceGetResult& _return, const Address& address, const Currency currency) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->BalanceGet(_return, address, currency);
    }
    ifaces_[i]->BalanceGet(_return, address, currency);
    return;
  }

  void TransactionGet(TransactionGetResult& _return, const TransactionId& transactionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransactionGet(_return, transactionId);
    }
    ifaces_[i]->TransactionGet(_return, transactionId);
    return;
  }

  void TransactionsGet(TransactionsGetResult& _return, const Address& address, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransactionsGet(_return, address, offset, limit);
    }
    ifaces_[i]->TransactionsGet(_return, address, offset, limit);
    return;
  }

  void TransactionFlow(TransactionFlowResult& _return, const Transaction& transaction) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->TransactionFlow(_return, transaction);
    }
    ifaces_[i]->TransactionFlow(_return, transaction);
    return;
  }

  void GetLastHash(PoolHash& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetLastHash(_return);
    }
    ifaces_[i]->GetLastHash(_return);
    return;
  }

  void PoolListGetStable(PoolListGetResult& _return, const PoolHash& hash, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PoolListGetStable(_return, hash, limit);
    }
    ifaces_[i]->PoolListGetStable(_return, hash, limit);
    return;
  }

  void PoolListGet(PoolListGetResult& _return, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PoolListGet(_return, offset, limit);
    }
    ifaces_[i]->PoolListGet(_return, offset, limit);
    return;
  }

  void PoolInfoGet(PoolInfoGetResult& _return, const PoolHash& hash, const int64_t index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PoolInfoGet(_return, hash, index);
    }
    ifaces_[i]->PoolInfoGet(_return, hash, index);
    return;
  }

  void PoolTransactionsGet(PoolTransactionsGetResult& _return, const PoolHash& hash, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PoolTransactionsGet(_return, hash, offset, limit);
    }
    ifaces_[i]->PoolTransactionsGet(_return, hash, offset, limit);
    return;
  }

  void StatsGet(StatsGetResult& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StatsGet(_return);
    }
    ifaces_[i]->StatsGet(_return);
    return;
  }

  void SmartContractGet(SmartContractGetResult& _return, const Address& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartContractGet(_return, address);
    }
    ifaces_[i]->SmartContractGet(_return, address);
    return;
  }

  void SmartContractsListGet(SmartContractsListGetResult& _return, const Address& deployer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartContractsListGet(_return, deployer);
    }
    ifaces_[i]->SmartContractsListGet(_return, deployer);
    return;
  }

  void SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return, const Address& deployer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartContractAddressesListGet(_return, deployer);
    }
    ifaces_[i]->SmartContractAddressesListGet(_return, deployer);
    return;
  }

  void WaitForBlock(PoolHash& _return, const PoolHash& obsolete) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WaitForBlock(_return, obsolete);
    }
    ifaces_[i]->WaitForBlock(_return, obsolete);
    return;
  }

  void WaitForSmartTransaction(TransactionId& _return, const Address& smart_address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WaitForSmartTransaction(_return, smart_address);
    }
    ifaces_[i]->WaitForSmartTransaction(_return, smart_address);
    return;
  }

  void SmartContractsAllListGet(SmartContractsListGetResult& _return, const int64_t offset, const int64_t limit) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartContractsAllListGet(_return, offset, limit);
    }
    ifaces_[i]->SmartContractsAllListGet(_return, offset, limit);
    return;
  }

  void SmartMethodParamsGet(SmartMethodParamsGetResult& _return, const Address& address, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SmartMethodParamsGet(_return, address, id);
    }
    ifaces_[i]->SmartMethodParamsGet(_return, address, id);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class APIConcurrentClient : virtual public APIIf {
 public:
  APIConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  APIConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void BalanceGet(BalanceGetResult& _return, const Address& address, const Currency currency);
  int32_t send_BalanceGet(const Address& address, const Currency currency);
  void recv_BalanceGet(BalanceGetResult& _return, const int32_t seqid);
  void TransactionGet(TransactionGetResult& _return, const TransactionId& transactionId);
  int32_t send_TransactionGet(const TransactionId& transactionId);
  void recv_TransactionGet(TransactionGetResult& _return, const int32_t seqid);
  void TransactionsGet(TransactionsGetResult& _return, const Address& address, const int64_t offset, const int64_t limit);
  int32_t send_TransactionsGet(const Address& address, const int64_t offset, const int64_t limit);
  void recv_TransactionsGet(TransactionsGetResult& _return, const int32_t seqid);
  void TransactionFlow(TransactionFlowResult& _return, const Transaction& transaction);
  int32_t send_TransactionFlow(const Transaction& transaction);
  void recv_TransactionFlow(TransactionFlowResult& _return, const int32_t seqid);
  void GetLastHash(PoolHash& _return);
  int32_t send_GetLastHash();
  void recv_GetLastHash(PoolHash& _return, const int32_t seqid);
  void PoolListGetStable(PoolListGetResult& _return, const PoolHash& hash, const int64_t limit);
  int32_t send_PoolListGetStable(const PoolHash& hash, const int64_t limit);
  void recv_PoolListGetStable(PoolListGetResult& _return, const int32_t seqid);
  void PoolListGet(PoolListGetResult& _return, const int64_t offset, const int64_t limit);
  int32_t send_PoolListGet(const int64_t offset, const int64_t limit);
  void recv_PoolListGet(PoolListGetResult& _return, const int32_t seqid);
  void PoolInfoGet(PoolInfoGetResult& _return, const PoolHash& hash, const int64_t index);
  int32_t send_PoolInfoGet(const PoolHash& hash, const int64_t index);
  void recv_PoolInfoGet(PoolInfoGetResult& _return, const int32_t seqid);
  void PoolTransactionsGet(PoolTransactionsGetResult& _return, const PoolHash& hash, const int64_t offset, const int64_t limit);
  int32_t send_PoolTransactionsGet(const PoolHash& hash, const int64_t offset, const int64_t limit);
  void recv_PoolTransactionsGet(PoolTransactionsGetResult& _return, const int32_t seqid);
  void StatsGet(StatsGetResult& _return);
  int32_t send_StatsGet();
  void recv_StatsGet(StatsGetResult& _return, const int32_t seqid);
  void SmartContractGet(SmartContractGetResult& _return, const Address& address);
  int32_t send_SmartContractGet(const Address& address);
  void recv_SmartContractGet(SmartContractGetResult& _return, const int32_t seqid);
  void SmartContractsListGet(SmartContractsListGetResult& _return, const Address& deployer);
  int32_t send_SmartContractsListGet(const Address& deployer);
  void recv_SmartContractsListGet(SmartContractsListGetResult& _return, const int32_t seqid);
  void SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return, const Address& deployer);
  int32_t send_SmartContractAddressesListGet(const Address& deployer);
  void recv_SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return, const int32_t seqid);
  void WaitForBlock(PoolHash& _return, const PoolHash& obsolete);
  int32_t send_WaitForBlock(const PoolHash& obsolete);
  void recv_WaitForBlock(PoolHash& _return, const int32_t seqid);
  void WaitForSmartTransaction(TransactionId& _return, const Address& smart_address);
  int32_t send_WaitForSmartTransaction(const Address& smart_address);
  void recv_WaitForSmartTransaction(TransactionId& _return, const int32_t seqid);
  void SmartContractsAllListGet(SmartContractsListGetResult& _return, const int64_t offset, const int64_t limit);
  int32_t send_SmartContractsAllListGet(const int64_t offset, const int64_t limit);
  void recv_SmartContractsAllListGet(SmartContractsListGetResult& _return, const int32_t seqid);
  void SmartMethodParamsGet(SmartMethodParamsGetResult& _return, const Address& address, const int64_t id);
  int32_t send_SmartMethodParamsGet(const Address& address, const int64_t id);
  void recv_SmartMethodParamsGet(SmartMethodParamsGetResult& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
