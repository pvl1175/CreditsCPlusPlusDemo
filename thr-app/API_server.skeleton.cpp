// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "API.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::api;

class APIHandler : virtual public APIIf {
 public:
  APIHandler() {
    // Your initialization goes here
  }

  void BalanceGet(BalanceGetResult& _return, const Address& address, const Currency currency) {
    // Your implementation goes here
    printf("BalanceGet\n");
  }

  void TransactionGet(TransactionGetResult& _return, const TransactionId& transactionId) {
    // Your implementation goes here
    printf("TransactionGet\n");
  }

  void TransactionsGet(TransactionsGetResult& _return, const Address& address, const int64_t offset, const int64_t limit) {
    // Your implementation goes here
    printf("TransactionsGet\n");
  }

  void TransactionFlow(TransactionFlowResult& _return, const Transaction& transaction) {
    // Your implementation goes here
    printf("TransactionFlow\n");
  }

  void GetLastHash(PoolHash& _return) {
    // Your implementation goes here
    printf("GetLastHash\n");
  }

  void PoolListGetStable(PoolListGetResult& _return, const PoolHash& hash, const int64_t limit) {
    // Your implementation goes here
    printf("PoolListGetStable\n");
  }

  void PoolListGet(PoolListGetResult& _return, const int64_t offset, const int64_t limit) {
    // Your implementation goes here
    printf("PoolListGet\n");
  }

  void PoolInfoGet(PoolInfoGetResult& _return, const PoolHash& hash, const int64_t index) {
    // Your implementation goes here
    printf("PoolInfoGet\n");
  }

  void PoolTransactionsGet(PoolTransactionsGetResult& _return, const PoolHash& hash, const int64_t offset, const int64_t limit) {
    // Your implementation goes here
    printf("PoolTransactionsGet\n");
  }

  void StatsGet(StatsGetResult& _return) {
    // Your implementation goes here
    printf("StatsGet\n");
  }

  void SmartContractGet(SmartContractGetResult& _return, const Address& address) {
    // Your implementation goes here
    printf("SmartContractGet\n");
  }

  void SmartContractsListGet(SmartContractsListGetResult& _return, const Address& deployer) {
    // Your implementation goes here
    printf("SmartContractsListGet\n");
  }

  void SmartContractAddressesListGet(SmartContractAddressesListGetResult& _return, const Address& deployer) {
    // Your implementation goes here
    printf("SmartContractAddressesListGet\n");
  }

  void WaitForBlock(PoolHash& _return, const PoolHash& obsolete) {
    // Your implementation goes here
    printf("WaitForBlock\n");
  }

  void WaitForSmartTransaction(TransactionId& _return, const Address& smart_address) {
    // Your implementation goes here
    printf("WaitForSmartTransaction\n");
  }

  void SmartContractsAllListGet(SmartContractsListGetResult& _return, const int64_t offset, const int64_t limit) {
    // Your implementation goes here
    printf("SmartContractsAllListGet\n");
  }

  void SmartMethodParamsGet(SmartMethodParamsGetResult& _return, const Address& address, const int64_t id) {
    // Your implementation goes here
    printf("SmartMethodParamsGet\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<APIHandler> handler(new APIHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new APIProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

